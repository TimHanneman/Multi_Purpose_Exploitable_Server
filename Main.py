#!/bin/python

# Precondition  : Must have imported modules and dependencies. Accepts system arguments if provided.
# Postcondition : Creates objects based on arguments and passes them off to the respective object needed to start the server.
# Description   : This code acts to select the server type, and any vulnerabilities that may be present.

#import sys
import argparse
from socket_class import sckt_class
from HTTP_1_0 import HTTP_1_0
#Get classes that are used in the project
#I might specifically import only after the arguments are parsed, since that might reduce loading unneeded code
'''from server_sockets import server_sockets
from http import http'''

'''Arguments are processed hierarchically. First look for major arguments
then if one of those is missing prompts for it. If the major arguments are provided, then 
specific subarguments are looked for. The selective guide will be 
rudimentary, prompting only for the major arguments, taking advantage of defaults.
'''

#Get arguments from the command line:
#args_r = sys.argv[1:]
argument_starter = argparse.ArgumentParser(description='Multi-purpose exploitable server.')

argument_starter.add_argument('-s', '--socket', nargs=2, help='Takes two arguments separated by a space. Set both the ip_address and the port number to listen on')
argument_starter.add_argument('-ip', '--ip_address',  help='IP address used to create a socket to listen on', default='127.0.0.1')
argument_starter.add_argument('-p', '--port', help='The port number that will be listened to', default='8080')
argument_starter.add_argument('-t', '--type', help='Specifies the server type to start. Default is http', default='http')

args = argument_starter.parse_args()

#Create HTTP Class
start_server = HTTP_1_0(args.ip, args.p)

#Check to see if there is a file with the arguments preset
#Arguments starting with the @ symbol will be replaced with the arguments
#Contained within the file. One argument per line.

#with open(file) as soemthing:
'''pasrser = argparse.ArgumentParser(fromfile_prefix_chars='@')'''

#If no arguments from commandline, do guided prompt.

#If some arguments from commandline, do selective prompt for missing arguments.

#If all arguments, then launch.

#Create server
'''http_server = http.http(ip, port)'''
