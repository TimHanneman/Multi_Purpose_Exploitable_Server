#!/bin/python

import sys
import argparse
import logging
#from PySide6.QtWidgets import QApplication

from gui_window import *

#Get classes that are used in the project
from construction import Server_Construction

logger = logging.getLogger(__name__)
logger.info(' INFO logger started from ' + __name__)
logger.error('ERROR logger started from ' + __name__)



class get_parser():
    '''Precondition  : Must have imported modules and dependencies. Accepts system arguments if provided.
    Postcondition : Creates objects based on arguments and passes them off to the respective object needed to start the server.
    Description   : This code acts to select the server type, and any vulnerabilities that may be present.'''

    logger.debug('Logger started from ' + __name__)
    def __init__(self):
        self.argument_starter = self.arguments_got()

    def arguments_got(self):
        '''Used to set what arguements the project accepts.'''
        argument_starter = None
        #Get arguments from the command line:
        if ( sys.argv[1:]):
            argument_starter = argparse.ArgumentParser(description='Multi-purpose exploitable server.')
            argument_starter.add_argument('-gui', '--graphical', help='Specifies if you want to run this from the gui or not. Will cause other parameters to be disregarded.', action='store_true')
            #argument_starter.add_argument('-s', '--socket', nargs=2, help='Takes two arguments separated by a space. Set both the ip_address and the port number to listen on')
            argument_starter.add_argument('-ip', '--ip_address',  help='IP address used to create a socket to listen on', default='127.0.0.1')
            argument_starter.add_argument('-p', '--port', help='The port number that will be listened to', default='8080')
            #argument_starter.add_argument('-t', '--type', help='Specifies the server type to start. Default is http', default='http')
            #argument_starter.add_argument('-d', '--directory', help='Used to set the server assets location. Assets is the directory with files the server operates on by default.', default='ASSETS')
            argument_starter.add_argument('-xss', '--cross_site_scripting', help='Used to enable the cross site scripting vulnerability', default='True')
            argument_starter.add_argument('-cmd', '--command_injection', help='Used to enable the command injection vulnerability in POST', default='True')

        return argument_starter
               
    def parse_them(self):
        ''' gets the arguments from shell and return them '''
        if (self.argument_starter):
            args = self.argument_starter.parse_args()
        else:
            args = None
        return args

if __name__ == '__main__':
    '''description='Multi-purpose exploitable server.
            '-gui', '--graphical', help='Specifies if you want to run this from the gui or not. Will cause other parameters to be disregarded.', default=False
            '-ip', '--ip_address',  help='IP address used to create a socket to listen on', default='127.0.0.1'
            '-p', '--port', help='The port number that will be listened to', default='8080'
            '-xss', '--cross_site_scripting', help='Used to enable the cross site scripting vulnerability', default='True'
            '-cmd', '--command_injection', help='Used to enable the command injection vulnerability in POST', default='True'
            '''

    start_multi_purpose_exploitable_server = get_parser();
    args = start_multi_purpose_exploitable_server.parse_them()

    if args:
        #Create HTTP Class
        if (args.graphical == True):
            app = QApplication([])
            win = Window()
            win.show()
            ret = app.exec_()
            sys.exit(ret)
        else:
            start_server = Server_Construction(args.ip_address, args.port, args.cross_site_scripting, args.command_injection)
    else:
        app = QApplication([])
        win = Window()
        win.show()
        ret = app.exec_()
        sys.exit(ret)