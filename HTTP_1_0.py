# Implements HTTP/1.0

#start with string
# 

import socket
import os
from socket_class import sckt_class

# Define socket host and port
SERVER_HOST = '0.0.0.0'
SERVER_PORT = 8080

# Test string for request
data = '''GET /iterlyzeBG.gif HTTP/1.1
Host: 127.0.0.1:8080
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.81
Accept: image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: http://127.0.0.1:8080/iterlyzeStyle.css
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9'''


# ________________________


class HTTP_1_0(sckt_class):

    status_codes = {
        200: 'OK',
        404: 'Not Found',
        501: 'Not Implemented',
    }


    def __init__(self, ip, port) :
        self.method = None
        self.uri = None
        self.http_version = "1.0"
        self.final_response = str()
        self.connection = None

        # self.ip = sckt_class.set_host(self, ip)
        self.ip = sckt_class(self, ip)

        # self.port = sckt_class.set_port(self, port)
        self.port = sckt_class(self, port)

        #set ip and port then call sckt method
        # c = sckt_class.sckt(self)
        c = self.sckt()

        #accept here
        # c_socket, c_address = c.accept()
        # data = c_socket.recv(1024).decode('utf-8')

        # self.connection = c_socket

        # self.parse(data)
        self.acpt(c)

    def parse(self, data) :

        # Split string by new line
        list = data.split("\n")

        # The first element in the list is the request line
        request_line = list[0]

        # Get individual pieces of request line
        parts = request_line.split(" ")

        self.method = parts[0]

        # If the request line has more than the request method
        #   set a variable for the URI
        if len(parts) > 1 :
            self.uri = parts[1]
            print(self.uri)

        #   set a variable for the HTTP version
        if len(parts) > 2 :
            self.http_version = parts[2]
            #print(self.http_version)

        if(self.method == 'GET') :
            self.handle_GET(self.uri)

    def handle_GET(self, req) :
        filename = self.uri.strip("/")

        if os.path.exists(filename) :
            final_response = self.response_line(status_code=200)

            with open(filename, 'rb') as f:
                resp = f.read()
                response_body = resp.decode('utf-8')

        else :
            final_response = self.response_line(status_code=404)
            response_body = "<h1>404 Not Found</h1>"

        final_R = final_response + "\r\n" + response_body

        final_R.encode()
        self.connection.send(final_R.encode())

    def response_line(self, status_code) :
        code = self.status_codes[status_code]
        response = "HTTP/1.0 %s %s\n" % (status_code, code)

        return response

    
#obj = HTTP_1_0(data)

