# Implements HTTP/1.0

#start with string
# 

# Precondition : Needs a socket_class to inherit from. Takes two strings, port and ip_address
# Postcondition: It creates a HTTP server that listens and sends info out.
# Description  : Class for creating HTTP server objects.

import socket
import os
import logging
from socket_class import sckt_class
from Modules.parse import Parser
from Modules.handle_get import Handle_GET

logger = logging.getLogger(__name__)

# Define socket host and port
SERVER_HOST = '0.0.0.0'
SERVER_PORT = 8080
__VERSION = '1'

# Test string for request
data = '''GET /iterlyzeBG.gif HTTP/1.1
Host: 127.0.0.1:8080
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.81
Accept: image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: http://127.0.0.1:8080/iterlyzeStyle.css
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9'''


# ________________________


class HTTP_1_0(sckt_class):

    logger.debug('Logger started from ' + __name__)


    def __init__(self, ip, port) :
        self.method = None
        self.uri = None
        self.http_version = "1.0"
        self.final_response = str()
        self.connection = None

        self.ip = sckt_class(self, ip)
        self.port = sckt_class(self, port)

        #set ip and port then call sckt method
        c = self.sckt()

        #accept here
        while (True):
            data = self.acpt(c)
            #self.parse(data)
            #Create a parse object.
            self.parse_obj = Parser
            #run the parse object.
            http_method, http_uri, http_version = self.parse_obj.parser1(self.parse_obj, data)
            if (http_method == 1):
                #If the return is 1, exit else Pass the results to the next module.
                self.connection.close()
            else:
                #If we get further in the project these if statements can become a method
                self.type_detect(http_method,http_uri,http_version)
            self.connection.close()

    def type_detect(self, method, uri, http_version):
        if (method == "GET"):
            #Create handleget object
            http_handle_get = Handle_GET
            #pass into handle get the uri
            http_handle_get.handle_GET(http_handle_get,uri, self.connection)
        else:
            return 1