# Implements HTTP/1.0

#import socket
#import os
#import logging
import dicts
import mimetypes
import base64
import time
#import threading
from socket_class import *
from Modules.parse import *
from Modules.handle_get import *
from Modules.post import Handle_POST

logger = logging.getLogger(__name__)

# Define socket host and port
SERVER_HOST = '0.0.0.0'
SERVER_PORT = 8080
__VERSION = '1'

# ________________________


class HTTP_1_0(sckt_class):
    ''' Precondition : Needs a socket_class to inherit from. Takes two strings, port and ip_address
 Postcondition: It creates a HTTP server that listens and sends info out.
 Description  : Class for creating HTTP server objects.'''

    logger.debug('Logger started from ' + __name__)
        

    def __init__(self, ip, port) :
        socket_to_listen_on = None

        #set ip and port then call sckt method
        self.host = ip
        self.prt = port
        self.socket_to_listen_on = self.sckt()
        self.server_loop(self.socket_to_listen_on)

    def server_loop(self,c):
        '''     Precondition : Socket has been created in the listen state.
     Postcondition: Accepts a connection and processes the request
     Description  : This is the main server loop that handles incoming connections.
        '''
        #accept here
        while (True):
            #If connections less than some amount accept it otherwise, accept, reject, close connection break loop
            _total_connections = threading.enumerate()
            if(len(_total_connections) > 50):
                break
            data, c_socket = self.acpt(c)

            #THREADING STARTS HERE
            self.thread_server(c_socket, data)

    def modules_to_thread(self,c_socket, data):
        '''The server code that is threaded per connection request is placed into this method'''
        self.parse_obj = Parser
        http_method, http_uri, http_version = self.parse_obj.parser1(self.parse_obj, data)

        if (http_method == 1):
            #If the return is 1, exit else Pass the results to the next module.
            c_socket.close()
        else:
            #If we get further in the project these if statements can become a method
            self.type_detect(http_method,http_uri,http_version,c_socket)
        c_socket.close()


    def thread_server(self, c_socket, data):
        t1 = threading.Thread(target=self.modules_to_thread, args=(c_socket, data,), daemon=True)
        t1.start()
        t1.join()


    def type_detect(self, method, uri, http_version,c):
        '''     Precondition : Takes 3 strings method, uri, http_version. Also takes in the socket_connection object.
     Postcondition: Sends the request to the appropriate request handler
     Description  : This function is used to route a request to the various request types.'''

        if (method == "GET"):
            #Create handle_get object
            http_handle_get = Handle_GET
            #pass the uri into handle_get
            logger.info(uri)
            http_handle_get.handle_GET(http_handle_get,uri, c)

        elif(method == "POST"):
            http_handle_post = Handle_POST
            http_handle_post.handle_POST(http_handle_post, uri, c, self.ip, self.port)
        else:
            return 1

