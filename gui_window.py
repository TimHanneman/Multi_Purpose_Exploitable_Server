import sys
import os
import threading
from PySide6.QtWidgets import QApplication, QLabel, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLineEdit
from PySide6.QtCore import Slot
import webbrowser

from construction import Server_Construction

class Window(QWidget):
    '''gui class
precondition: Creates a GUI that accepts a port and host.
postcondition: Displays a GUI window that allows user to input desired host and port and then launches a webpage.
description: This class provides the user a simple way to launch a website with the desired host and port.'''

    def __init__(self):
        super().__init__()
        self.only_one_server = 0
        self.ip_lbl = QLabel('IP Address: ', self)
        self.ip_addr = QLineEdit(self)
        self.port_lbl = QLabel('Port Number: ', self)
        self.prt_nmbr = QLineEdit(self)
        self.btn = QPushButton("Enter")
        self.btn.clicked.connect(self.on_click)

        # self.temp = QLabel('Temp')      #for testing puposes

        vbox = QVBoxLayout()
        
        vbox.addWidget(self.ip_lbl)
        vbox.addWidget(self.ip_addr)
        vbox.addWidget(self.port_lbl)
        vbox.addWidget(self.prt_nmbr)
        vbox.addWidget(self.btn)
        
        # vbox.addWidget(self.temp)       #for testing puposes

        self.setLayout(vbox)
        self.setWindowTitle("Multipurpose Honeypot Server")
        self.setGeometry(350,200,350,200)
        self.show()


    @Slot()
    def on_click(self):
        '''    precondition: Accepts the port and host inputed by the user.
    postcondition: Launches a webpage witht he provided host and port.
    description: This method allows us a smooth launch when the enter button is clicked.'''

        ip = self.ip_addr.text()
        prt = self.prt_nmbr.text()
        
        #This code could block the process unless operating system, and browser type is accounted for.
        #chrome_path="C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
        #webbrowser.register('chrome', None, webbrowser.BackgroundBrowser(chrome_path))
        #webbrowser.get('chrome').open('%s:%s/HTML_files/index.html' % (ip, prt))
        #os.system("python Main.py -ip %s -p %s" % (ip, prt))

        if self.only_one_server < 1:
            self.only_one_server += 1
            t_server = threading.Thread(target=self.module_4server_start, args=(ip, prt,),daemon=True)
            t_server.start()
        else:
            print("Restart the server if you want to change the IP and PORT\n")
        #QWidget.close(self)

    def module_4server_start(self, ip, prt):
        start_server = Server_Construction(ip, prt)

        
    def closeEvent(self, event):
        '''
        Precondition : provided an event
        Postcondition: Indicates that the user tried to exit the program
        Description  : Useful code for processing a system event from the gui'''
        print("User has clicked the red x on the main window")
        #os._exit(0)
        event.accept()

        ####################################
        #   FOR TESTING PURPOSES    #
        # self.temp.setText('Working')
        # self.repaint()
        ####################################
            
if __name__ == '__main__':

    app = QApplication([])
    win = Window()
    win.show()
    ret = app.exec_()
    sys.exit(ret)